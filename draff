#!/usr/bin/env php
<?php

/**
 * @file
 * Produces a daily log summary.
 */

ini_set('error_reporting', E_ALL);
ini_set('display_errors', true);
ini_set('memory_limit', 2 * 1024 * 1024 * 1024);

define('NULL_STRING', '𝑛𝑢𝑙𝑙');  // Make null values look distinct, in both plaintext and HTML output.

function progress(int $current, int $total) {
  if (!posix_isatty(STDOUT))
    return;

  $width = 80;
  $progress = (int)(($current / $total) * $width);
  echo "\rParsing…  " . str_repeat('▓', $progress) . str_repeat('░', max(0, $width - $progress))
    . '  ' . str_pad($current, strlen($total), ' ', STR_PAD_LEFT) . ' / ' . $total . ' events'
    . '  (' . number_format(memory_get_usage() / 1024 / 1024) . ' MiB RAM)';
}

function renderHourOfDayHistogram($hourlyCounts) {
  $max = 0;
  for ($i = 0; $i <= 23; ++$i)
    $max = max($max, $hourlyCounts[$i]);

  $out = "<div class='hour-of-day-histogram'>";
  for ($i = 0; $i <= 11; ++$i) {
    $v = max(0, min(10, ceil($hourlyCounts[$i] / $max * 10)));
    $out .= "<span class='value-$v'></span>";
  }
  $out .= "<span class='bar'></span>";
  for ($i = 12; $i <= 23; ++$i) {
    $v = max(0, min(10, ceil($hourlyCounts[$i] / $max * 10)));
    $out .= "<span class='value-$v'></span>";
  }
  $out .= "</div>";
  return $out;
}

/**
 * Removes zero-width ANSI escape sequences.
 */
function stripAnsi(string $s) : String {
  // Reduce ANSI hyperlinks to just the link's title:
  $s = preg_replace('@\e\]8;;[^\e]+\e\\\([^\e]+)\e\]8;;\e\\\@', '$1', $s);
  // Remove formatting:
  $s = preg_replace('@\e\[\d+m@', '', $s);
  return $s;
}

function generateCSSIdentifier(string $s) : string {
  $s = strtolower($s);
  $s = preg_replace('/(<br>|&nbsp;).+$/', '', $s);
  $s = preg_replace('/^[^a-z]+/', '', $s);
  $s = preg_replace('/[^a-z0-9-]+/', '-', $s);
  return rtrim($s, '-');
}

function renderMarkdownTable($title, $data, $ignoreKeys=[], $alignments=[]) {
  if (count($data) === 0)
    return '';

  global $html;

  $output = '';
  if ($html)
    $output .= "<h3>$title</h3>\n<table>\n";
  else
    $output .= "    $title\n";

  $headers = [];
  $widths = [];
  foreach ($data as $row)
    foreach ($row as $key => $value) {
      if (in_array($key, $ignoreKeys))
        continue;
      if (!in_array($key, $headers))
        $headers[] = $key;
      if (is_array($value))
        $value = json_encode($value);
      $width = max(mb_strlen($html ? strip_tags($key) : stripAnsi($key)), mb_strlen($html ? strip_tags($value) : stripAnsi($value)));
      if (!isset($widths[$key]) || $width > $widths[$key])
        $widths[$key] = $width;
    }

  $lastHeader = $headers[count($headers) - 1];
  $headerLine = [];
  foreach ($headers as $header)
    $headerLine[] = $header === $lastHeader ? $header : str_pad(in_array($header, ['count', 'hourOfDayHistogram']) ? '' : $header, $widths[$header]);
  if ($html) {
    $output .= '<tr>';
    foreach ($headerLine as $header) {
      $cssIdentifier = generateCSSIdentifier($header);
      $output .= '<th';
      if ($cssIdentifier)
        $output .= " class='{$cssIdentifier}'";
      $output .= '>';
      $output .= str_replace('.', '<wbr />.', $header);
      $output .= '</th>';
    }
    $output .= "</tr>\n";
  }
  else
    $output .= '        ' . implode(' | ', $headerLine) . "\n";

  $separatorLine = [];
  foreach ($headers as $header)
    $separatorLine[] = str_repeat('-', $widths[$header]);
  if (!$html)
    $output .= '        ' . implode(' | ', $separatorLine) . "\n";

  foreach ($data as $row) {
    if ($html)
      $output .= '<tr>';
    else
      $output .= '        ';
    foreach ($row as $key => $value) {
      if (in_array($key, $ignoreKeys))
        continue;

      if ($value === NULL_STRING)
        $padWidth = $widths[$key] + strlen($value) - mb_strlen($value);
      else
        $padWidth = $widths[$key] + strlen($value) - mb_strlen(stripAnsi($value));
      $value = $key === $lastHeader ? $value : str_pad($value, $padWidth, ' ', $alignments[$key] ?? STR_PAD_RIGHT);

      if ($html) {
        $cssIdentifier = generateCSSIdentifier($key);
        $output .= '<td';
        if ($cssIdentifier)
          $output .= " class='{$cssIdentifier}'";
        $output .= ">{$value}</td>";
      }
      else {
        $output .= $value;
        if ($key !== $lastHeader)
          $output .= ' | ';
      }
    }
    if ($html)
      $output .= '</tr>';
    $output .= "\n";
  }

  if ($html)
    $output .= "</table>\n";
  $output .= "\n";

  return $output;
}

function truncate($string) : string {
  global $html, $long;

  $maxLength = $long ? 16384 : ($html ? 1024 : 80);

  if (strlen($string) <= $maxLength)
    return $string;

  $out = substr($string, 0, $maxLength);
  if (!$html) {
    // Terminate any ANSI hyperlinks that might have been truncated.
    $out .= "\e]8;;\e\\";
    // Terminate any ANSI highlights that might have been truncated.
    $out .= "\e[27m";
  }

  return $out . '…';
}

/**
 * Returns the value for the specified field.
 *
 * @param [Array] $event
 * @param [String] $fieldPath A dot-separated field path (e.g. `event.type`).
 * @param [bool] $fancyNull When the specified field doesn't exist in the event, should this function return string NULL_STRING (true) or PHP null (false).
 * @return String If the event's value is an array, this function returns it as a JSON-encoded string.
 */
function getEventValue(Array $event, String $fieldPath, bool $fancyNull = true) : String|null {
  if ($fieldPath === 'client.geo.region_city') {
    $region = getEventValue($event, 'client.geo.region_iso_code', false);
    $city = getEventValue($event, 'client.geo.city_name', false);
    if ($region && $city)
      return "$region-$city";
    if ($region)
      return $region;
    $country = getEventValue($event, 'client.geo.country_iso_code', false);
    if ($country)
      return $country;
  }

  $components = explode('.', $fieldPath);
  $componentIndex = 0;
  $p = $event;
  foreach ($components as $component) {
    if (isset($p[$component]))
      $p = $p[$component];
    else {
      // Handle case where the message keys have interior dotted sections.
      // E.g. fieldPath `gitlab.grpc.request.glProjectPath` should match:
      // {"gitlab":{"grpc.request.glProjectPath":"kosada/client/someClient"}}
      $remainingComponents = implode('.', array_slice($components, $componentIndex));
      if (isset($p[$remainingComponents])) {
        $p = $p[$remainingComponents];
        break;
      }
      else
        return $fancyNull ? NULL_STRING : null;
    }
    ++$componentIndex;
  }

  if ($fieldPath === 'client.user.name' && is_array($p) && in_array('archive', $p)) {
    unset($p[array_search('archive', $p)]);
    $p = array_values($p);
  }

  if (is_array($p)) {
    if (count($p) === 0)
      return $fancyNull ? NULL_STRING : null;
    elseif (count($p) === 1 && is_string(reset($p)))
      $p = reset($p);
    else {
      global $html;
      $p = json_encode($p, $html ? JSON_PRETTY_PRINT : 0);
    }
  }

  global $config;
  if (isset($config['rewrites'][$fieldPath]))
    foreach ($config['rewrites'][$fieldPath] as $regexMatch => $regexReplacement) {
      $p2 = preg_replace("~$regexMatch~ms", $regexReplacement, $p);
      if (is_null($p2))
        die("\nerror: rewriting field \"{$fieldPath}\" value \"{$p}\" with regex \"~{$regexMatch}~ms\" returned null.\n");
      $p = $p2;
    }

  return $p;
}

function setEventValue(Array &$event, String $fieldPath, $value) {
  $dot = strpos($fieldPath, '.');
  if ($dot !== false) {
    $car = substr($fieldPath, 0, $dot);
    $cdr = substr($fieldPath, $dot + 1);
    if (!isset($event[$car]))
      $event[$car] = [];
    setEventValue($event[$car], $cdr, $value);
  }
  else
    $event[$fieldPath] = $value;
}

/**
 * Returns true if the event matches all of the regexes in the group.
 *
 * @param [Array] $regexGroup The array's key is the dot-separated field path (e.g. `event.type`), and the value is a regex that that field path should match.
 * @return bool
 */
function eventMatchesRegexGroup(Array $event, Array $regexGroup) : bool {
  foreach ($regexGroup as $fieldPath => $fieldValueRegex) {
    $ret = @preg_match("~$fieldValueRegex~", getEventValue($event, $fieldPath, false));
    if ($ret === false)
      error_log("error: regex compilation failed for regex \"{$fieldValueRegex}\" for field \"{$fieldPath}\": " . preg_last_error_msg());
    if (!$ret)
      return false;
  }

  return true;
}

/**
 * Returns a new event that contains only the elements used in this summary's charts,
 * in order to reduce peak memory usage.
 */
function pruneEvent(&$event, $summaryConfig) {
  $fieldsUsed = [ '_id', '_index', '_hourOfDay' ];
  foreach ($summaryConfig['charts'] as $chartConfig) {
    $groupByField = $chartConfig['group_by'] ?? 'message';
    $showFields = $chartConfig['show_fields'] ?? (is_array($groupByField) ? $groupByField : [$groupByField]);
    if (is_array($groupByField))
      $fieldsUsed = array_merge($fieldsUsed, $groupByField);
    else
      $fieldsUsed[] = $groupByField;
    $fieldsUsed = array_merge($fieldsUsed, $showFields);
  }
  $fieldsUsed = array_unique($fieldsUsed);

  $prunedEvent = [];
  foreach ($fieldsUsed as $fieldPath) {
    $value = getEventValue($event, $fieldPath, false);
    if ($value !== null)
      setEventValue($prunedEvent, $fieldPath, $value);
  }

  return $prunedEvent;
}

function parseEvent($event, &$eventsGrouped, $summarizeOnly) {
  if (empty($event))
    return;

  if (isset($event['message'])) {
    $m = $event['message'];
    if (is_array($m))
      $m = reset($m);
  }

  $timestamp = DateTimeImmutable::createFromFormat(DateTimeInterface::RFC3339_EXTENDED, $event['@timestamp']);
  if (!$timestamp) {
    $timestamp = DateTimeImmutable::createFromFormat(DateTimeInterface::RFC3339, $event['@timestamp']);
    if (!$timestamp) {
      $timestamp = new DateTimeImmutable($event['@timestamp']);
      if (!$timestamp)
        error_log("\nwarning: couldn't parse timestamp: " . $event['@timestamp']);
    }
  }

  $localtime = $timestamp->setTimezone(new DateTimeZone('America/New_York'));
  $event['_hourOfDay'] = $localtime->format('G');

  global $config;
  $event['_index'] = $localtime->format($config['elasticsearch_index_date_format']);

  global $firstTimestamp, $lastTimestamp;
  if ($localtime < $firstTimestamp)
    $firstTimestamp = $localtime;
  if ($localtime > $lastTimestamp)
    $lastTimestamp = $localtime;

  // Match this event to a summary.
  global $config;
  foreach ($config['summaries'] as $summaryName => $summaryConfig) {
    if (!empty($summarizeOnly) && $summaryName !== 'ℹ️  Other' && !preg_match("~$summarizeOnly~", $summaryName))
      continue;

    if (!isset($summaryConfig['select'])) {
      $event = pruneEvent($event, $summaryConfig);
      $eventsGrouped[$summaryName][] = $event;
      return;
    }

    $matchedThisSummary = false;
    foreach ($summaryConfig['select'] as $regexGroup) {
      if (eventMatchesRegexGroup($event, $regexGroup)) {
        $matchedThisSummary = true;
        break;
      }
    }
    if ($matchedThisSummary) {
      $event = pruneEvent($event, $summaryConfig);
      $eventsGrouped[$summaryName][] = $event;
      return;
    }
  }
}

function parseLog($filepath, &$eventsGrouped, &$eventCount, $summarizeOnly) {
  $fh = fopen($filepath, 'r');
  $eventCount = 0;
  while (!feof($fh) && fgets($fh))
    ++$eventCount;
  fseek($fh, 0);

  global $firstTimestamp, $lastTimestamp;
  $firstTimestamp = new DateTimeImmutable('9999-01-01');
  $lastTimestamp  = new DateTimeImmutable('2000-01-01');

  $lineIndex = 0;
  while (!feof($fh)) {
    if ($lineIndex % 1000 == 0)
      progress($lineIndex, $eventCount);
    parseEvent(json_decode(fgets($fh), true), $eventsGrouped, $summarizeOnly);
    ++$lineIndex;
  }
  fclose($fh);
  progress($lineIndex - 1, $eventCount);
  echo "\n";
}

/**
 * Returns an array of events grouped by the specified field(s).
 * Each grouped event contains a count of events in the group,
 * a hour-of-day histogram, and a single representative document.
 */
function groupEventsByField($events, $groupByField) {
  $groupedEvents = [];
  foreach ($events as $event) {
    if (is_array($groupByField)) {
      $groupByFieldValue = [];
      foreach ($groupByField as $field)
        $groupByFieldValue[] = getEventValue($event, $field);
    }
    else
      $groupByFieldValue = getEventValue($event, $groupByField);
    if (is_array($groupByFieldValue))
      $groupByFieldValue = json_encode($groupByFieldValue);

    if (isset($groupedEvents[$groupByFieldValue])) {
      ++$groupedEvents[$groupByFieldValue]['count'];
      ++$groupedEvents[$groupByFieldValue]['hourOfDayHistogram'][$event['_hourOfDay']];

      // For the 'representative document', sometimes show events other than the first event.
      if (rand(0, 100) > 80)
        $groupedEvents[$groupByFieldValue]['exampleEvent'] = $event;
    }
    else {
      $hourOfDayHistogram = array_fill(0, 24, 0);
      $hourOfDayHistogram[$event['_hourOfDay']] = 1;
      $groupedEvents[$groupByFieldValue] = [
        'count' => 1,
        'hourOfDayHistogram' => $hourOfDayHistogram,
        'exampleEvent' => $event,
      ];
    }
  }

  return $groupedEvents;
}

function highlightMatches($select, $name, $value) {
  // @todo Currently this highlights matches in any regex group, whereas ideally it should match only in the _active_ regex group.
  foreach ($select as $regexes) {
    foreach ($regexes as $fieldName => $fieldRegex) {
      // Skip regexes intended for exclusion.
      if (str_contains($fieldRegex, '(?!'))
        continue;

      if ($fieldName === $name) {
        $count = null;
        $value = preg_replace_callback("~$fieldRegex~", function ($matches) {
          global $html;
          if ($html)
            return "<mark>{$matches[0]}</mark>";
          else
            return "\e[7m{$matches[0]}\e[27m";
        }, $value);
      }
    }
  }
  return $value;
}

function annotateValue($value) {
  global $config;
  foreach ($config['annotations'] as $annotateRegex => $annotateLink) {
    $value = @preg_replace_callback("~{$annotateRegex}~", function ($matches) use ($annotateLink) {
      global $html;
      if ($html)
        return '<a href="' . $annotateLink . '" class="annotate"><span class="tooltip" title="Annotation: ' . $annotateLink . '">' . $matches[0] . '&nbsp;📎</span></a>';
      else
        return "\e]8;;" . $annotateLink . "\e\\" . $matches[0] . " 📎\e]8;;\e\\";

    }, $value);
    if ($value === null)
      error_log("error: regex compilation failed for regex \"{$annotateRegex}\" for annotation \"{$annotateLink}\": " . preg_last_error_msg());
  }

  return $value;
}

function renderChart($summaryConfig, $chartName, $chartConfig, $events) {
  global $config;
  global $html;
  $times = $html ? '×' : 'x';

  $count = $chartConfig['count'] ?? (!empty($summaryConfig['concern']) ? 1000 : 5);
  $groupByField = $chartConfig['group_by'] ?? 'message';
  $showFields = $chartConfig['show_fields'] ?? (is_array($groupByField) ? $groupByField : [$groupByField]);

  $groupedEvents = groupEventsByField($events, $groupByField);

  if (isset($chartConfig['hide_groups_with_fewer_than'])) {
    $hideGroupsWithFewerThan = $chartConfig['hide_groups_with_fewer_than'];
    $origCount = count($groupedEvents);
    $groupedEvents = array_filter($groupedEvents, function ($a) use ($hideGroupsWithFewerThan) {
      return $a['count'] >= $hideGroupsWithFewerThan;
    });
    if ($origCount !== count($groupedEvents))
      $hideGroupsWithFewerThan_removedItems = true;
  }

  if (!empty($summaryConfig['select'])) {
    if (!empty($summaryConfig['kibana_query']))
      $kibanaQueryComponents = [ $summaryConfig['kibana_query'] ];
    else {
      $kibanaQueryComponents = [];
      foreach ($summaryConfig['select'] as $regexGroup) {
        $q = [];
        foreach ($regexGroup as $fieldPath => $fieldValueRegex) {
          // Elasticsearch doesn't seem to support anchors, so try it without them.
          $fieldValueRegex = preg_replace('/^\^|\$$/', '', $fieldValueRegex);

          // Guess whether we need to treat it as a regex, or whether we can just use a plaintext phrase query (more efficient, and supports multi-word phrases).
          if (strpbrk($fieldValueRegex, '()[]<>|.*+?:\\') !== false)
            $q[] = "$fieldPath:/$fieldValueRegex/";
          else {
            // Guess whether we need to quote the value.
            if (strpos($fieldValueRegex, ' ') === false)
              $q[] = "$fieldPath:$fieldValueRegex";
            else
              $q[] = "$fieldPath:\"$fieldValueRegex\"";
          }
        }

        if (count($q) > 1)
          $kibanaQueryComponents[] = '(' . implode(' AND ', $q) . ')';
        else
          $kibanaQueryComponents[] = $q[0];
      }
    }

    // Make all the columns narrow except the last one, which is typically a long message.
    $columnWidths = ['\'@timestamp\':(width:180)'];
    foreach (array_slice($showFields, 0, -1) as $field)
      $columnWidths[] = $field . ':(width:180)';

    $kibanaURL = $config['kibana_base_url'] . '/app/discover#/'
      . '?_g=(time:(from:now-1d/d,to:now-1d/d),refreshInterval:(pause:!t))'
      . '&_a=('
        . 'columns:!(' . urlencode(implode(',', $showFields)) . '),'
        . 'grid:(columns:(' . urlencode(implode(',', $columnWidths)) . ')),'
        . 'filters:!((meta:(negate:!t),query:(match_phrase:(tags:exclude_from_daily_summary)))),'
        . 'query:(language:lucene,query:\'' . urlencode(implode(' OR ', $kibanaQueryComponents)) . '\')'
      . ')';
  }

  $title = $chartName;
  if (!empty($kibanaURL)) {
    if ($html)
      $title = "<a href=\"{$kibanaURL}\"><span class='tooltip' title=\"Kibana Discover query: " . htmlspecialchars(implode(' OR ', $kibanaQueryComponents)) . "\"><span class='content'>{$title}</span></span></a>";
    else
      $title = "\e]8;;{$kibanaURL}\e\\{$title}\e]8;;\e\\";
  }
  if (count($groupedEvents) > $count)
    $title .= $html ? " <small>top $count</small>" : " (top $count)";
  if (!empty($hideGroupsWithFewerThan_removedItems))
    $title .= $html ? " <small>≥ $hideGroupsWithFewerThan</small>" : " (≥ $hideGroupsWithFewerThan)";

  if (isset($chartConfig['sort_by'])) {
    $sortBy = explode(' ', $chartConfig['sort_by']);
    if ($sortBy[0] === 'show_fields') {
      // Sort by each of the shown fields, in order:
      $sortBy = [$chartConfig['show_fields'], $sortBy[1]];
      uasort($groupedEvents, function ($a, $b) use ($sortBy) {
        foreach ($sortBy[0] as $field) {
          $av = getEventValue($a['exampleEvent'], $field);
          $bv = getEventValue($b['exampleEvent'], $field);
          if ($av < $bv)
            return $sortBy[1] === 'descending' ?  1 : -1;
          else if ($av > $bv)
            return $sortBy[1] === 'descending' ? -1 :  1;
          // else continue to compare the next field in show_fields…
        }
      });
    }
    else {
      // Sort by a specific field:
      $sortBy[0] = [$sortBy[0]];
      if (!isset($sortBy[1]))
        $sortBy[1] = 'ascending';
      uasort($groupedEvents, function ($a, $b) use ($sortBy) {
        $av = getEventValue($a['exampleEvent'], $sortBy[0][0]);
        $bv = getEventValue($b['exampleEvent'], $sortBy[0][0]);
        if ($av < $bv)
          return $sortBy[1] === 'descending' ?  1 : -1;
        else if ($av > $bv)
          return $sortBy[1] === 'descending' ? -1 :  1;
        else
          // Always secondary-sort by count.
          return -($a['count'] <=> $b['count']);
      });
    }
  }
  else {
    // Default to sorting by count:
    $sortBy = [['count'], 'descending'];
    uasort($groupedEvents, function ($a, $b) {
      return -($a['count'] <=> $b['count']);
    });
  }

  $tableData = [];
  foreach (array_slice($groupedEvents, 0, $count) as $bucketName => $bucketData) {
    $rowCountLabel = $bucketData['count'] . $times;
    if (!empty($bucketData['exampleEvent']['_id'])) {
      $rowCountLabelLen = mb_strlen($rowCountLabel);
      $kibanaURL = $config['kibana_base_url'] . '/app/discover#/context/' . $config['elasticsearch_data_view_id'] . '/' . $bucketData['exampleEvent']['_id'];
      if ($html) {
        if ($bucketData['count'] == 1)
          $rowCountLabel = "<a href='{$kibanaURL}'><span class='tooltip' title=\"Kibana: Show this document and its surrounding documents\"><span class='content'>{$rowCountLabel}</span></span></a>";
        else
          $rowCountLabel = "<a href='{$kibanaURL}'><span class='tooltip' title=\"Kibana: Show a representative document and surrounding documents\"><span class='content'>{$rowCountLabel}</span></span></a>";
      }
      else
        $rowCountLabel = "\e]8;;{$kibanaURL}\e\\{$rowCountLabel}\e]8;;\e\\";

      // Make the columns line up when copying from the email and pasting in a text editor.
      $rowCountLabel = str_repeat(' ', max(0, 6 - $rowCountLabelLen)) . $rowCountLabel;
    }

    $row = ['count' => $rowCountLabel];
    if ($html)
      $row['hourOfDayHistogram'] = renderHourOfDayHistogram($bucketData['hourOfDayHistogram']);

    foreach ($showFields as $fieldName) {
      $suffix = '';
      // In macOS 26 Mail.app, the ⯆⯅ arrow glyphs are rendered incorrectly.  `&#x2bc6;` and `&#x2bc5;` are also rendered incorrectly.  Using a different arrow glyph does work.
      if (in_array($fieldName, $sortBy[0]))
        $suffix .= ($html ? '&nbsp;' : ' ') . ($sortBy[1] === 'descending' ? '⬇︎' : '⬆︎');

      if ((is_array($groupByField) && !in_array($fieldName, $groupByField))
        || (!is_array($groupByField) && $fieldName !== $groupByField))
        $suffix .= $html ? '<br><small>(poly)</small>' : ' (poly)';

      $fieldValue = getEventValue($bucketData['exampleEvent'], $fieldName);

      if ($fieldName === 'event.duration' && $fieldValue !== NULL_STRING)
        // Convert nanoseconds to seconds
        $fieldValue = number_format(((double)$fieldValue) / 1.e9, 3) . ' sec';

      if (is_array($fieldValue))
        $fieldValue = json_encode($fieldValue, $html ? JSON_PRETTY_PRINT : 0);
      else
        // Decode hex escapes into Unicode characters (e.g. `\xd1\x81\xd0\xb0\xd0\xb9\xd1\x82` -> `сайт`).
        $fieldValue = preg_replace_callback('/\\\x([0-9a-f]{2})/', function ($matches) { return hex2bin($matches[1]); }, $fieldValue);

      if ($html) {
        if ($fieldValue === NULL_STRING)
          $fieldValue = '<small>' . NULL_STRING . '</small>';
        else
          $fieldValue = htmlspecialchars($fieldValue);
      }
      else
        $fieldValue = str_replace("\n", '\n', $fieldValue);

      if (!empty($summaryConfig['select']))
        $fieldValue = highlightMatches($summaryConfig['select'], $fieldName, $fieldValue);

      $fieldValue = annotateValue($fieldValue);

      $row[$fieldName . $suffix] = truncate($fieldValue);
    }
    $tableData[] = $row;
  }

  return renderMarkdownTable($title, $tableData, [], ['count' => STR_PAD_LEFT]);
}

function showSummaries($eventsGrouped, $totalEventCount, $parseLogDuration, $showOnly) {
  global $firstTimestamp, $lastTimestamp, $html, $config;

  echo 'Processed ' . number_format($totalEventCount) . ' events'
    . ' in ' . number_format($parseLogDuration) . ' seconds'
    . ' (' . number_format($totalEventCount / $parseLogDuration) . ' events/second)'
    . ' using ' . number_format(memory_get_peak_usage() / 1024 / 1024) . " MiB RAM\n";

  $timeFormat = 'Y-m-d H:i:s';
  global $html;
  if ($html) {
    echo "<table>\n";
    echo '<tr><th>First event</th><td>' . $firstTimestamp->format($timeFormat) . "</td></tr>\n";
    echo '<tr><th>Last event</th><td>' . $lastTimestamp->format($timeFormat) . "</td></tr>\n";
    echo "</table><br>\n";
  }
  else {
    echo 'First event: ' . $firstTimestamp->format($timeFormat) . "\n";
    echo 'Last event:  ' . $lastTimestamp->format($timeFormat) . "\n\n";
  }

  foreach ($config['summaries'] as $summaryName => $summaryConfig) {
    if (!isset($eventsGrouped[$summaryName]))
      continue;

    if (!empty($showOnly) && !preg_match('@' . $showOnly . '@', $summaryName))
      continue;

    $concern = !empty($summaryConfig['concern']);
    $class = $concern ? 'concern' : '';
    $eventCount = count($eventsGrouped[$summaryName]);
    $percent = ($eventCount / $totalEventCount > 0.1) ? (' (' . (int)($eventCount / $totalEventCount * 100) . '%)') : '';

    $renderedCharts = '';
    foreach ($summaryConfig['charts'] as $chartName => $chartConfig)
      $renderedCharts .= renderChart($summaryConfig, $chartName, $chartConfig, $eventsGrouped[$summaryName]);

    if (!empty($renderedCharts)) {
      if ($html)
        echo "\n<article class='$class'><h2>$summaryName <small style='user-select: none;'>" . $eventCount . " event" . ($eventCount === 1 ? '' : 's') . $percent . "</small></h2>\n";
      else {
        if ($concern)
          echo "\e[48;2;32;32;0m\n";  // dark yellow
        echo "\n$summaryName: " . $eventCount . " event" . ($eventCount === 1 ? '' : 's') . $percent . "\n";
      }

      if (isset($summaryConfig['description'])) {
        if ($html)
          echo "<p class='description'>{$summaryConfig['description']}</p>\n";
        else
          echo"{$summaryConfig['description']}\n";
      }

      echo $renderedCharts;

      if ($html)
        echo "</article>\n";
      else {
        if ($concern)
          echo "\e[0m\n";
      }
    }
  }
}


global $config;
$config = yaml_parse_file('draff.yaml');
if (!$config)
  return;

function usage() {
  $app = basename($GLOBALS['argv'][0]);
  die("{$app}: Inputs logs, outputs a daily email summary.\n"
    . "\n"
    . "Usage: \n"
    . "    {$app} [--yesterday|--today|--date='-2 days'|--log=someLogFilePath] [--html] [--email] [--email-to=someAddress] [--show-only=partialNameOfASummary]\n");
}

$longopts = [
  # Log file selection:
  'yesterday',
  'today',
  'date:',
  'log:',

  # Analysis:
  'summarize-only:',

  # Output:
  'html',
  'email', 'mail',
  'email-to:', 'mail-to:',
  'long',
  'show-only:',
  'filter:',
  'help',
];
$options = getopt('', $longopts);
if (isset($options['help']))
  usage();

if (isset($options['date'])) {
  $logDate = date('Ymd', strtotime($options['date']));
  $logfile = sprintf($config['logfile'], $logDate);
}
else if (isset($options['log']))
  $logfile = $options['log'];
else if (isset($options['today'])) {
  $logDate = date('Ymd');
  $logfile = sprintf($config['logfile'], $logDate);
}
else {
  // If `--yesterday` was set.
  // Or if no date/log option was set, default to yesterday.
  $logDate = date('Ymd', strtotime('-1 day'));
  $logfile = sprintf($config['logfile'], $logDate);
}

$html  = isset($options['html']);
$email = isset($options['email']) || isset($options['mail']) ;
$long  = isset($options['long']);

if (isset($options['email-to']) || isset($options['mail-to']))
  $email = true;

if ($email)
  $html = true;

$eventsGrouped = [];
$t0 = microtime(true);
parseLog($logfile, $eventsGrouped, $eventCount, $options['summarize-only'] ?? '');
$parseLogDuration = microtime(true) - $t0;

if ($email) {
  $email_to = $options['email-to'] ?? $options['mail-to'] ?? implode(', ', $config['email_to']);
  if (posix_isatty(STDOUT))
    echo 'Generating…';
  ob_start();
}

if ($html)
  echo '
    <style type="text/css">
      a { color: #126; }
      article { background-color: #f8f8f8; border-radius: 1em; padding: 1em; margin-bottom: 2em; }
      article.concern, article.concern table th { background-color: #ffd; }
      h2 { margin: 0; }
      h3 { border-bottom: 1px solid silver; margin-top: 1em; }
      h3 .content { opacity: 0.5; }
      h3 a { text-decoration: none; }
      h2 small, h3 small { background-color: rgba(0,0,0,0.2); border-radius: 1em; padding: 0.5em; }
      article p.description { opacity: 0.5; max-width: 40em; }
      small { opacity: 0.5; font-size: 70%; font-weight: normal; }
      mark { background-color: #eeb; }
      .concern mark { background-color: #ee8; }
      pre { white-space: pre-wrap; }
      article table th { text-align: left; vertical-align: baseline; border-bottom: 1px solid rgba(0,0,0,0.2); padding: 0 1em 0 0; }
      article table th:first-child,
      article table th:nth-child(2) {
        border-bottom: none; width: 4em;
      }
      article table .client-user-name { width: 10em; max-width: 10em; }
      article table td { vertical-align: baseline; word-break: break-all; white-space: pre-wrap; min-width: 5em; padding: 0 1em 0 0; font-variant-numeric: tabular-nums; }
      article table td:first-child { text-align: right; }
      article table td:first-child,
      article table td:nth-child(2) {
        min-width: 4em;
      }
      article table td:first-child .content { opacity: 0.5; }
      a.annotate { border: 1px solid rgba(128,128,255,0.2); border-radius: 0.3em; background-color: rgba(128,128,255,0.2); padding: .1em .2em; text-decoration: none; }
      .tooltip { position: relative; }
      .tooltip:before { display: none; content: attr(title); position: absolute; left: 0; bottom: 2em; padding: .5em; background-color: rgba(255,255,255,.95); color: #000; box-shadow: 0 5px 5px rgba(0,0,0,.2); border-radius: .2em; font-size: 9pt; width: max-content; max-width: 40em; font-weight: normal; }
      .tooltip:hover:before { display: block; z-index: 100; }

      .hour-of-day-histogram {
        background: rgba(0,0,0,0.1);
        display: inline-block;
        border-left: 1px solid rgba(0,0,0,.1);
        border-right: 1px solid rgba(0,0,0,.1);
      }
      .hour-of-day-histogram span {
        width: 2px;
        display: inline-block;
        border-bottom: 0px solid #24b;
      }
      .hour-of-day-histogram .bar {
        background: rgba(0,0,0,.1);
        width: 1px;
        height: 10px;
      }
      .hour-of-day-histogram .value-1  { border-bottom-width:  1px; }
      .hour-of-day-histogram .value-2  { border-bottom-width:  2px; }
      .hour-of-day-histogram .value-3  { border-bottom-width:  3px; }
      .hour-of-day-histogram .value-4  { border-bottom-width:  4px; }
      .hour-of-day-histogram .value-5  { border-bottom-width:  5px; }
      .hour-of-day-histogram .value-6  { border-bottom-width:  6px; }
      .hour-of-day-histogram .value-7  { border-bottom-width:  7px; }
      .hour-of-day-histogram .value-8  { border-bottom-width:  8px; }
      .hour-of-day-histogram .value-9  { border-bottom-width:  9px; }
      .hour-of-day-histogram .value-10 { border-bottom-width: 10px; }
    </style>
  ';

showSummaries($eventsGrouped, $eventCount, $parseLogDuration, $options['show-only'] ?? $options['filter'] ?? '');

if ($email) {
  $body = ob_get_contents();
  ob_end_clean();
  if (posix_isatty(STDOUT))
     echo "\nSending…";
  mail($email_to, $config['email_subject'], $body, $html ? 'Content-Type: text/html; charset=UTF-8' : []);
  if (posix_isatty(STDOUT))
    echo "\n";
}
